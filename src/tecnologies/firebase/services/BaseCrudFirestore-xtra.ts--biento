
// // ............... ............... ............... ...............
// crud__del = async (col, id) => {
// 	// ............... ............... ............... ...............
// 	try {
// 		const { FIRESTORE } = getFirebase();
// 		const d = doc(FIRESTORE, col.id, id);
// 		await deleteDoc(d);
// 		// __________________________________
// 		this.LOG_LEVEL__ON
// 			? console.debug(`🚔🔥 >> ✅ DELET-ED ! >> ${col.id.toUpperCase()} -- ${id}`)
// 			: '';
// 	} catch (error) {
// 		this.LOG_LEVEL__ON
// 			? console.debug(`🚔🔥 >> ❌ DELET-ING... >> ${col.id.toUpperCase()} -- ${id}`)
// 			: '';
// 		console.error(error);
// 		return null;
// 		// throw new Error(`🔥 >> ❌ DELET-ING... >> ${col.id.toUpperCase()} -- ${id}`);
// 	}
// };
// // ............... ............... ............... ...............
// crud__onSnapshot_DB = (col) => {
// 	// ............... ............... ............... ...............
// 	try {
// 		// --- real time
// 		const stream = (callback) =>
// 			onSnapshot(col, (snap) => {
// 				try {
// 					this.LOG_LEVEL__ON ? console.debug(`🚔🔥🟣💀 SUSCRIBE REAL TIME SNAPSHOTS`) : '';
// 					const list = snap.docs.map((x) => {
// 						return { ...x.data(), id: x.id };
// 					});
// 					callback(list);
// 				} catch (error) {
// 					console.error(error);
// 				}
// 			});
// 		return { stream };
// 	} catch (error) {
// 		console.error(error);
// 		return null;
// 	}
// };
// // ............... ............... ............... ...............
// crud__q_DB = async <T>(col, P1: string, P2, P3: string) => {
// 	// ............... ............... ............... ...............
// 	try {
// 		const list: T[] = [];
// 		// help >> orderBy("state"), orderBy("population", "desc"));
// 		const q = query<T>(
// 			col,
// 			where(P1, P2, P3)
// 			// orderBy(`km`),
// 			// limit(LIMIT)
// 		);
// 		// __________________________________
// 		const d = await getDocs<T>(q);
// 		// ---
// 		d.forEach((x) => {
// 			list.push(x.data());
// 		});
// 		this.LOG_LEVEL__ON
// 			? console.debug(`🚔🔥 >> ✅ QUERY-ED ! >> ${col.id.toUpperCase()} -- ${P1} ${P2} ${P3}`)
// 			: '';
// 		return list;
// 	} catch (error) {
// 		this.LOG_LEVEL__ON
// 			? console.debug(`🚔🔥 >> ❌ QUERY-ING... >> ${col.id.toUpperCase()} -- ${P1} ${P2} ${P3}`)
// 			: '';
// 		console.error(error);
// 		return null;
// 	}
// };
// ----------------------------------------------------------
//  const query_DB = async (col, list) => {
// 	const LIMIT = 600;
// 	const l2 = list.map((itm) => itm.toLowerCase());
// 	const result_ = await mapFileds(`city`);
// 	return result_;
// 	// ---
// 	// ---
// 	// ---
// 	async  mapFileds(fieldName: string) {
// 		// todo  orderBy("state"), orderBy("population", "desc")); todo
// 		const q = query(
// 			//
// 			col,
// 			where(fieldName, `in`, l2),
// 			orderBy(`km`),
// 			limit(LIMIT)
// 		);
// 		const snap = await getDocs(q);
// 		const list = snap.docs.map((x) => {
// 			return {
// 				//
// 				...x.data(),
// 				id: x.id
// 			};
// 			// as Record<string, never>
// 		});
// 		return list;
// 	}
// };


	// --- mod soft --> juste merge the change (keep ALL unchanged !!! =>> dangerous i think)
	// serverTimestamp()
	// ............... ............... ............... ...............
	// crud__modSoft = async <T extends T_GLOBAL_ENTITIES>(col, id: string, data) => {
	// ............... ............... ............... ...............
	// 	// LIGHT LOG
	// 	// purple
	// 	const msg = `\x1B[45;97;4m ${col.id.toUpperCase()} \x1B[m\x1B[105;97;4m ${id}\x1B[m`;
	// 	// HEAVY LOG
	// 	// 	const msg = `\x1B[45;97;4m ${col.id.toUpperCase()} \x1B[m \x1B[105;97;4m ${id}\x1B[m
	// 	// \x1B[105;97;4m${JSON.stringify(data, null, 2)} \x1B[m`;
	// 	const callback = async () => {
	// 		// { merge: true } + setDoc<T> = SET + MERGE=TRUE permet de ne pas ecraser l existant ! AKA non-destructives writes
	// 		await updateDoc<T>(doc<T>(col, id), { ...data });
	// 		// ...............
	// 		return { msg, data: data };
	// 	};
	// 	// --- end
	// 	return await this.firestore__tryHelper(callback, msg, 'MOD');
	// };
	// ADD HARD (erase )